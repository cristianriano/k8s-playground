kind: Deployment
apiVersion: apps/v1
metadata:
  name: traefik-deployment
  labels:
    app: traefik

spec:
  replicas: 1
  selector:
    matchLabels:
      app: traefik
  template:
    metadata:
      labels:
        app: traefik
    spec:
      serviceAccountName: traefik-account
      containers:
        - name: traefik
          image: traefik:v2.9
          args:
            # Insecure exposes the dashboard on port 8080
            - --api.insecure
            - --providers.kubernetesingress

            # Static config
            # - --entryPoints.web.address=:80 # (default)
            - --providers.file.directory=/etc/conf.d/traefik_dynamic_config.yml

            # Max idle (keep-alive) connections to keep per-host
            - --serversTransport.maxIdleConnsPerHost=1
            # Max time an idle (keep-alive) connection will remain idle before closing
            - --serversTransport.forwardingTimeouts.idleConnTimeout=30s
            # Amount of time to wait for a server's response headers after fully writing the request
            - --serversTransport.forwardingTimeouts.responseHeaderTimeout=1s
            # Max duration allowed for a connection to a backend server to be established
            - --serversTransport.forwardingTimeouts.dialTimeout=1s
          ports:
            - name: web
              containerPort: 80
            - name: dashboard
              containerPort: 8080
          volumeMounts:
            - name: traefik-volume
              # Must exist already
              mountPath: /etc/conf.d/
      volumes:
        - name: traefik-volume
          configMap:
            # Name of the volume. Defined when created with `kubectl apply`
            name: traefik-dynamic-config

---

apiVersion: v1
kind: Service
metadata:
  name: traefik-dashboard-service

spec:
  # LoadBalancer exposes the Service externally using a cloud provider's load balancer. For Minikube we need to use Minikube tunnel
  # https://minikube.sigs.k8s.io/docs/handbook/accessing/#loadbalancer-access
  type: LoadBalancer
  ports:
    - port: 8080
      targetPort: dashboard
  selector:
    app: traefik

---

apiVersion: v1
kind: Service
metadata:
  name: traefik-web-service

spec:
  type: LoadBalancer
  ports:
    - targetPort: web
      port: 80
  selector:
    app: traefik

---

kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: traefik-access-to-nginx
spec:
  podSelector:
    matchLabels:
      app: traefik
  policyTypes:
    - Egress
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: nginx
